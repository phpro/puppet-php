# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   This function converts a +{key => value}+ hash into a nested hash and can add an id to the outer key.
#The optional id string as second parameter is prepended to the resource name.
#
#*Examples:*
#
#  to_hash_settings({'a' => 1, 'b' => 2})
#
#Would return:
#  {
#    'a' => {'key' => 'a', 'value' => 1},
#    'b' => {'key' => 'b', 'value' => 2}
#  }
#
#and:
#
#  to_hash_settings({'a' => 1, 'b' => 2}, 'foo')
#
#Would return:
#  {
#    'foo: a' => {'key' => 'a', 'value' => 1},
#    'foo: b' => {'key' => 'b', 'value' => 2}
#  }
#
#
Puppet::Functions.create_function(:'php::to_hash_settings') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    hash, id = arguments
    id = (id.nil? ? "" : "#{id}: ")

    raise(Puppet::ParseError, "to_hash_settings(): Requires hash to work with") unless hash.is_a?(Hash)

    return hash.reduce({}) do |acc, kv|
      acc[id + kv[0]] = { "key" => kv[0], "value" => kv[1] }
      acc
    end
  
  end
end
